plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'

	id "jacoco-report-aggregation"
}

group = 'br.com.claudsan'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

springBoot {
	buildInfo()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.3.0'
	implementation "org.springframework.boot:spring-boot-starter-actuator:3.2.5"
	implementation 'org.modelmapper:modelmapper:3.2.0'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.6.2'

	testImplementation 'io.projectreactor:reactor-test:3.4.7'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly "io.micrometer:micrometer-registry-prometheus:1.12.3"
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/dto/*.*",
					"**/document/*",
					"**/config/*",
					"**/metrics/*",
					"**/handlers/*",
			])
		}))
	}

	reports {
		xml.required = true
	}
}
